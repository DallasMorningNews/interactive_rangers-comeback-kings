{"version":3,"sources":["+a_wNumb.js","+custom.js","+nouislider.min.js"],"names":["strReverse","a","split","reverse","join","strStartsWith","input","match","substring","length","strEndsWith","slice","throwEqualError","F","b","Error","isValidNumber","isFinite","toFixed","value","decimals","scale","Math","pow","round","formatTo","thousand","mark","prefix","postfix","encoder","decoder","negativeBefore","negative","edit","undo","inputIsNegative","inputPieces","inputBase","originalInput","inputDecimals","output","parseFloat","abs","toString","indexOf","formatFrom","replace","Number","validate","inputOptions","i","optionName","optionValue","filteredOptions","FormatOptions","undefined","passAll","options","method","args","push","apply","wNumb","this","to","from","window","$","document","ready","drawGameLogs","data","target","d3","select","html","gameLogs","selectAll","enter","append","attr","d","one_run_win","one_run_loss","text","createToolTip","on","index","left","offset","top","winWidth","width","console","log","css","outerWidth","right","game_date","team","runs","opponent","runs_against","removeClass","addClass","drawWinsLosses","empty","wins","losses","drawNinthWins","each","ninthData","k","v","id","behindWins","runSim","standings","simData","rate","teamIndex","oneRunners","_","findIndex","o","abbr","winsLosses","n","random","setTimeout","x","orderBy","leadWins","gamesBack","games_behind","pct","children","eq","show","drawLC","leagueHittingData","rangersHittingData","allHittingData","hittingAverages","hittingTarget","leaguePitchingData","rangersPitchingData","allPitchingData","pitchingAverages","pitchingTarget","margin","bottom","height","xScaleHitting","scaleLinear","domain","max","lc_batting_average","range","yScaleHitting","lc_runs_produced","xAxisHitting","axisBottom","tickValues","tickFormat","hittingFormat","tickSize","yAxisHitting","axisLeft","ticks","xScalePitching","lc_inning_pitched","yScalePitching","lc_era","xAxisPitching","yAxisPitching","pitchingFormat","hittingSVG","call","player","name","pitchingSVG","classed","filteredHitters","filteredPitchers","selectedTeam","mascot","transition","duration","exit","remove","Date","year","getFullYear","sliderValue","click","getJSON","texWL","oppWL","hide","event","stopPropagation","siblings","parents","slider","getElementById","noUiSlider","create","start","min","format","values","handle","lateHitters","latePitchers","leagueHitters","rangersHitters","leaguePitchers","rangersPitchers","lcQueue","totalHits","totalABs","totalRunsProd","lc_hits","lc_ab","avgRunsProd","avgAvg","totalERs","wholeInns","partialInns","wholeIPs","floor","partialIPs","lc_earned_runs","totalOuts","totalIPs","avgERA","avgIPs","define","amd","exports","module","c","createElement","j","appendChild","filter","getBoundingClientRect","ownerDocument","e","documentElement","f","m","test","navigator","userAgent","y","clientTop","clientLeft","isNaN","g","h","Array","isArray","String","classList","add","className","RegExp","l","contains","pageXOffset","compatMode","scrollLeft","body","pageYOffset","scrollTop","pointerEnabled","move","end","msPointerEnabled","p","q","r","s","t","u","w","Object","prototype","xPct","xVal","xSteps","xHighestCompleteStep","xNumSteps","ceil","snap","direction","hasOwnProperty","sort","z","singleStep","A","spectrum","dir","B","handles","C","D","animate","E","animationDuration","connect","G","ort","H","getMargin","I","limit","J","K","events","tap","drag","fixed","hover","L","tooltips","forEach","M","N","cssPrefix","O","cssClasses","P","useRequestAnimationFrame","Q","T","step","orientation","behaviour","base","origin","horizontal","vertical","background","ltr","rtl","draggable","active","tooltip","pips","pipsHorizontal","pipsVertical","marker","markerHorizontal","markerVertical","markerNormal","markerLarge","markerSub","valueHorizontal","valueVertical","valueNormal","valueLarge","valueSub","keys","style","styleOposite","R","setAttribute","ba","ca","ha","aa","firstChild","map","Z","innerHTML","ia","fromStepping","getStep","toStepping","unshift","mode","density","stepped","fa","hasAttribute","pageOffset","ea","buttons","calcPoint","points","addEventListener","preventDefault","type","touches","changedTouches","pageX","pageY","clientX","clientY","cursor","ga","ka","da","ja","nodeName","relatedTarget","appVersion","buttonsProperty","startCalcPoint","baseSize","locations","handleNumbers","querySelector","removeEventListener","noUiListener","noUiListeners","concat","getComputedStyle","S","requestAnimationFrame","childNodes","zIndex","U","V","W","X","removeChild","Y","getNearbySteps","thisStep","stepAfter","startValue","stepBefore","highestStep","countStepDecimals","destroy","steps","off","get","set","reset","__moveHandles","updateOptions","convert"],"mappings":"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","file":"scripts-bundle.js","sourcesContent":["(function(){\n\n\t'use strict';\n\nvar\n/** @const */ FormatOptions = [\n\t'decimals',\n\t'thousand',\n\t'mark',\n\t'prefix',\n\t'postfix',\n\t'encoder',\n\t'decoder',\n\t'negativeBefore',\n\t'negative',\n\t'edit',\n\t'undo'\n];\n\n// General\n\n\t// Reverse a string\n\tfunction strReverse ( a ) {\n\t\treturn a.split('').reverse().join('');\n\t}\n\n\t// Check if a string starts with a specified prefix.\n\tfunction strStartsWith ( input, match ) {\n\t\treturn input.substring(0, match.length) === match;\n\t}\n\n\t// Check is a string ends in a specified postfix.\n\tfunction strEndsWith ( input, match ) {\n\t\treturn input.slice(-1 * match.length) === match;\n\t}\n\n\t// Throw an error if formatting options are incompatible.\n\tfunction throwEqualError( F, a, b ) {\n\t\tif ( (F[a] || F[b]) && (F[a] === F[b]) ) {\n\t\t\tthrow new Error(a);\n\t\t}\n\t}\n\n\t// Check if a number is finite and not NaN\n\tfunction isValidNumber ( input ) {\n\t\treturn typeof input === 'number' && isFinite( input );\n\t}\n\n\t// Provide rounding-accurate toFixed method.\n\tfunction toFixed ( value, decimals ) {\n\t\tvar scale = Math.pow(10, decimals);\n\t\treturn ( Math.round(value * scale) / scale).toFixed( decimals );\n\t}\n\n\n// Formatting\n\n\t// Accept a number as input, output formatted string.\n\tfunction formatTo ( decimals, thousand, mark, prefix, postfix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\n\n\t\tvar originalInput = input, inputIsNegative, inputPieces, inputBase, inputDecimals = '', output = '';\n\n\t\t// Apply user encoder to the input.\n\t\t// Expected outcome: number.\n\t\tif ( encoder ) {\n\t\t\tinput = encoder(input);\n\t\t}\n\n\t\t// Stop if no valid number was provided, the number is infinite or NaN.\n\t\tif ( !isValidNumber(input) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Rounding away decimals might cause a value of -0\n\t\t// when using very small ranges. Remove those cases.\n\t\tif ( decimals !== false && parseFloat(input.toFixed(decimals)) === 0 ) {\n\t\t\tinput = 0;\n\t\t}\n\n\t\t// Formatting is done on absolute numbers,\n\t\t// decorated by an optional negative symbol.\n\t\tif ( input < 0 ) {\n\t\t\tinputIsNegative = true;\n\t\t\tinput = Math.abs(input);\n\t\t}\n\n\t\t// Reduce the number of decimals to the specified option.\n\t\tif ( decimals !== false ) {\n\t\t\tinput = toFixed( input, decimals );\n\t\t}\n\n\t\t// Transform the number into a string, so it can be split.\n\t\tinput = input.toString();\n\n\t\t// Break the number on the decimal separator.\n\t\tif ( input.indexOf('.') !== -1 ) {\n\t\t\tinputPieces = input.split('.');\n\n\t\t\tinputBase = inputPieces[0];\n\n\t\t\tif ( mark ) {\n\t\t\t\tinputDecimals = mark + inputPieces[1];\n\t\t\t}\n\n\t\t} else {\n\n\t\t// If it isn't split, the entire number will do.\n\t\t\tinputBase = input;\n\t\t}\n\n\t\t// Group numbers in sets of three.\n\t\tif ( thousand ) {\n\t\t\tinputBase = strReverse(inputBase).match(/.{1,3}/g);\n\t\t\tinputBase = strReverse(inputBase.join( strReverse( thousand ) ));\n\t\t}\n\n\t\t// If the number is negative, prefix with negation symbol.\n\t\tif ( inputIsNegative && negativeBefore ) {\n\t\t\toutput += negativeBefore;\n\t\t}\n\n\t\t// Prefix the number\n\t\tif ( prefix ) {\n\t\t\toutput += prefix;\n\t\t}\n\n\t\t// Normal negative option comes after the prefix. Defaults to '-'.\n\t\tif ( inputIsNegative && negative ) {\n\t\t\toutput += negative;\n\t\t}\n\n\t\t// Append the actual number.\n\t\toutput += inputBase;\n\t\toutput += inputDecimals;\n\n\t\t// Apply the postfix.\n\t\tif ( postfix ) {\n\t\t\toutput += postfix;\n\t\t}\n\n\t\t// Run the output through a user-specified post-formatter.\n\t\tif ( edit ) {\n\t\t\toutput = edit ( output, originalInput );\n\t\t}\n\n\t\t// All done.\n\t\treturn output;\n\t}\n\n\t// Accept a sting as input, output decoded number.\n\tfunction formatFrom ( decimals, thousand, mark, prefix, postfix, encoder, decoder, negativeBefore, negative, edit, undo, input ) {\n\n\t\tvar originalInput = input, inputIsNegative, output = '';\n\n\t\t// User defined pre-decoder. Result must be a non empty string.\n\t\tif ( undo ) {\n\t\t\tinput = undo(input);\n\t\t}\n\n\t\t// Test the input. Can't be empty.\n\t\tif ( !input || typeof input !== 'string' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// If the string starts with the negativeBefore value: remove it.\n\t\t// Remember is was there, the number is negative.\n\t\tif ( negativeBefore && strStartsWith(input, negativeBefore) ) {\n\t\t\tinput = input.replace(negativeBefore, '');\n\t\t\tinputIsNegative = true;\n\t\t}\n\n\t\t// Repeat the same procedure for the prefix.\n\t\tif ( prefix && strStartsWith(input, prefix) ) {\n\t\t\tinput = input.replace(prefix, '');\n\t\t}\n\n\t\t// And again for negative.\n\t\tif ( negative && strStartsWith(input, negative) ) {\n\t\t\tinput = input.replace(negative, '');\n\t\t\tinputIsNegative = true;\n\t\t}\n\n\t\t// Remove the postfix.\n\t\t// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/slice\n\t\tif ( postfix && strEndsWith(input, postfix) ) {\n\t\t\tinput = input.slice(0, -1 * postfix.length);\n\t\t}\n\n\t\t// Remove the thousand grouping.\n\t\tif ( thousand ) {\n\t\t\tinput = input.split(thousand).join('');\n\t\t}\n\n\t\t// Set the decimal separator back to period.\n\t\tif ( mark ) {\n\t\t\tinput = input.replace(mark, '.');\n\t\t}\n\n\t\t// Prepend the negative symbol.\n\t\tif ( inputIsNegative ) {\n\t\t\toutput += '-';\n\t\t}\n\n\t\t// Add the number\n\t\toutput += input;\n\n\t\t// Trim all non-numeric characters (allow '.' and '-');\n\t\toutput = output.replace(/[^0-9\\.\\-.]/g, '');\n\n\t\t// The value contains no parse-able number.\n\t\tif ( output === '' ) {\n\t\t\treturn false;\n\t\t}\n\n\t\t// Covert to number.\n\t\toutput = Number(output);\n\n\t\t// Run the user-specified post-decoder.\n\t\tif ( decoder ) {\n\t\t\toutput = decoder(output);\n\t\t}\n\n\t\t// Check is the output is valid, otherwise: return false.\n\t\tif ( !isValidNumber(output) ) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn output;\n\t}\n\n\n// Framework\n\n\t// Validate formatting options\n\tfunction validate ( inputOptions ) {\n\n\t\tvar i, optionName, optionValue,\n\t\t\tfilteredOptions = {};\n\n\t\tfor ( i = 0; i < FormatOptions.length; i+=1 ) {\n\n\t\t\toptionName = FormatOptions[i];\n\t\t\toptionValue = inputOptions[optionName];\n\n\t\t\tif ( optionValue === undefined ) {\n\n\t\t\t\t// Only default if negativeBefore isn't set.\n\t\t\t\tif ( optionName === 'negative' && !filteredOptions.negativeBefore ) {\n\t\t\t\t\tfilteredOptions[optionName] = '-';\n\t\t\t\t// Don't set a default for mark when 'thousand' is set.\n\t\t\t\t} else if ( optionName === 'mark' && filteredOptions.thousand !== '.' ) {\n\t\t\t\t\tfilteredOptions[optionName] = '.';\n\t\t\t\t} else {\n\t\t\t\t\tfilteredOptions[optionName] = false;\n\t\t\t\t}\n\n\t\t\t// Floating points in JS are stable up to 7 decimals.\n\t\t\t} else if ( optionName === 'decimals' ) {\n\t\t\t\tif ( optionValue >= 0 && optionValue < 8 ) {\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(optionName);\n\t\t\t\t}\n\n\t\t\t// These options, when provided, must be functions.\n\t\t\t} else if ( optionName === 'encoder' || optionName === 'decoder' || optionName === 'edit' || optionName === 'undo' ) {\n\t\t\t\tif ( typeof optionValue === 'function' ) {\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(optionName);\n\t\t\t\t}\n\n\t\t\t// Other options are strings.\n\t\t\t} else {\n\n\t\t\t\tif ( typeof optionValue === 'string' ) {\n\t\t\t\t\tfilteredOptions[optionName] = optionValue;\n\t\t\t\t} else {\n\t\t\t\t\tthrow new Error(optionName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Some values can't be extracted from a\n\t\t// string if certain combinations are present.\n\t\tthrowEqualError(filteredOptions, 'mark', 'thousand');\n\t\tthrowEqualError(filteredOptions, 'prefix', 'negative');\n\t\tthrowEqualError(filteredOptions, 'prefix', 'negativeBefore');\n\n\t\treturn filteredOptions;\n\t}\n\n\t// Pass all options as function arguments\n\tfunction passAll ( options, method, input ) {\n\t\tvar i, args = [];\n\n\t\t// Add all options in order of FormatOptions\n\t\tfor ( i = 0; i < FormatOptions.length; i+=1 ) {\n\t\t\targs.push(options[FormatOptions[i]]);\n\t\t}\n\n\t\t// Append the input, then call the method, presenting all\n\t\t// options as arguments.\n\t\targs.push(input);\n\t\treturn method.apply('', args);\n\t}\n\n\t/** @constructor */\n\tfunction wNumb ( options ) {\n\n\t\tif ( !(this instanceof wNumb) ) {\n\t\t\treturn new wNumb ( options );\n\t\t}\n\n\t\tif ( typeof options !== \"object\" ) {\n\t\t\treturn;\n\t\t}\n\n\t\toptions = validate(options);\n\n\t\t// Call 'formatTo' with proper arguments.\n\t\tthis.to = function ( input ) {\n\t\t\treturn passAll(options, formatTo, input);\n\t\t};\n\n\t\t// Call 'formatFrom' with proper arguments.\n\t\tthis.from = function ( input ) {\n\t\t\treturn passAll(options, formatFrom, input);\n\t\t};\n\t}\n\n\t/** @export */\n\twindow.wNumb = wNumb;\n\n}());\n","$(document).ready(function() {\n\n\t//custom scripting goes here\n\n\t// injecting current year into footer\n\t// DO NOT DELETE\n\n\tvar simData;\n\n\tvar d = new Date();\n\tvar year = d.getFullYear();\n\n\t$('.copyright').text(year);\n\n\tvar sliderValue = 77;\n\n\tvar ninthData;\n\n\t$(document).click(function() {\n\t\t$(\".custom-list\").addClass(\"no-show\");\n\t});\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// INITIAL DATA DRAW AND FORMATTING /////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$.getJSON(\"assets/python-scripts/json/rangers-game-logs.json\", function(data) {\n\n\t\tvar texWL = {\n\t\t\t\"wins\": 0,\n\t\t\t\"losses\": 0\n\t\t};\n\n\t\t$.each(data, function(k, v) {\n\t\t\tif (v.one_run_win === true) {\n\t\t\t\ttexWL.wins ++;\n\t\t\t} else if (v.one_run_loss === true) {\n\t\t\t\ttexWL.losses ++;\n\t\t\t}\n\t\t});\n\n\t\tsimData = data;\n\n\t\tdrawGameLogs(data, \"#tex-game-log-chart\");\n\t\tdrawWinsLosses(texWL, \"#tex-wins-losses\");\n\n\n\t});\n\n\t$.getJSON(\"assets/python-scripts/json/team-skeds/LAA-game-logs.json\", function(data) {\n\n\t\tvar oppWL = {\n\t\t\t\"wins\": 0,\n\t\t\t\"losses\": 0\n\t\t};\n\n\n\t\t$.each(data, function(k, v) {\n\t\t\tif (v.one_run_win === true) {\n\t\t\t\toppWL.wins ++;\n\t\t\t} else if (v.one_run_loss === true) {\n\t\t\t\toppWL.losses ++;\n\t\t\t}\n\t\t});\n\n\t\t$(\"#opp-total\").text(oppWL.wins + \"-\" + oppWL.losses);\n\n\n\t\tdrawGameLogs(data, \"#opp-game-log-chart\");\n\t\tdrawWinsLosses(oppWL, \"#opp-wins-losses\");\n\n\t});\n\n\t$.getJSON(\"assets/python-scripts/json/ninthInning.json\", function(data) {\n\t\tninthData = data;\n\n\t\tdrawNinthWins(\"LAA\", \"#opp-ninth-wins\");\n\t\tdrawNinthWins(\"TEX\", \"#tex-ninth-wins\");\n\t});\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// DRAWING THE GAME LOGS ////////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction drawGameLogs(data, target) {\n\n\t\td3.select(target).html(\"\");\n\n\t\tvar gameLogs = d3.select(target).selectAll(\".game-log\")\n\t\t\t.data(data);\n\n\t\t\tgameLogs.enter().append(\"span\")\n\t\t\t\t.attr(\"class\", function(d) {\n\t\t\t\t\tif (d.one_run_win === true) {\n\t\t\t\t\t\treturn (\"game-log one-run-win\");\n\t\t\t\t\t} else if (d.one_run_loss === true) {\n\t\t\t\t\t\treturn (\"game-log one-run-loss\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn (\"game-log\");\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.text(function(d) {\n\t\t\t\t\tif (d.one_run_win === true || d.one_run_loss === true) {\n\t\t\t\t\t\treturn (d.win_loss);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\tcreateToolTip(data, target);\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// POPULATING AND DISPLAYING THE TOOLTIP ////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction createToolTip(data, target) {\n\n\t\t$(target + \" .game-log\").on(\"mouseenter\", function() {\n\t\t\tvar index = $(this).index();\n\n\t\t\tvar top = $(this).offset().top;\n\t\t\tvar left = $(this).offset().left;\n\t\t\tvar winWidth = $(window).width();\n\t\t\tconsole.log(data);\n\t\t\t$(\"#tool-tip\").css(\"top\", $(this).offset().top - 10);\n\n\t\t\tif (left > winWidth / 2) {\n\t\t\t\t$(\"#tool-tip\").css({\n\t\t\t\t\t\"left\": left - ($(\"#tool-tip\").outerWidth() + 10)\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t$(\"#tool-tip\").css({\n\t\t\t\t\t\"right\": \"auto\",\n\t\t\t\t\t\"left\": left + 25\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t$(\"#game-date\").text(data[index].game_date);\n\t\t\t$(\"#game-score\").text(data[index].team + \" \" + data[index].runs + \", \" + data[index].opponent + \" \" + data[index].runs_against);\n\n\t\t\t$(\"#tool-tip\").removeClass(\"no-show\");\n\t\t});\n\n\t\t$(target + \" .game-log\").on(\"mouseout\", function() {\n\t\t\t$(\"#tool-tip\").addClass(\"no-show\");\n\t\t});\n\t}\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// DRAWING THE ONE-RUNS WINS AND LOSSES /////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction drawWinsLosses(data, target) {\n\n\t\t$(target).empty();\n\n\t\tfor (i=0; i<data.wins; i++) {\n\t\t\t$(target).append(\"<span class='game-log one-run-win'>W</span>\");\n\t\t}\n\n\t\tfor (i=0; i<data.losses; i++) {\n\t\t\t$(target).append(\"<span class='game-log one-run-loss'>L</span>\");\n\t\t}\n\n\t}\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// DRAWING THE ONE-RUNS WINS AND LOSSES /////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tfunction drawNinthWins(team, target) {\n\n\t\t// empty out the html from the target element\n\t\t$(target).empty();\n\n\t\t// we'll use this wins variable to draw out the appropriate number of\n\t\t// spans for each team's ninth-inning comeback wins\n\n\t\tvar wins = 0;\n\n\t\t// iterate over the ninth-inning comeback data and find the supplied team\n\t\t// setting the wins variable equal to that team's number of wins\n\t\t$.each(ninthData, function(k,v) {\n\t\t\tif (v.id === team) {\n\t\t\t\twins = ninthData[k].behindWins;\n\t\t\t}\n\t\t});\n\n\t\t// draw the spans for the graphic\n\t\tfor (i=0; i<wins; i++) {\n\t\t\t$(target).append(\"<span class='game-log one-run-win'>W</span>\");\n\t\t}\n\t}\n\n\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// RUNNING THE SIMULATION ///////////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t// ****** CLICKING THE SIM BUTTON ******\n\n\t$(\"#sim-button\").click(function() {\n\n\t\t// resets standings to actual finish\n\t\tvar standings = [\n\t\t\t{\"team\": \"rangers\",\"abbr\": \"TEX\",\"wins\": 95,\"losses\": 67},\n\t\t\t{\"team\": \"mariners\",\"abbr\": \"SEA\",\"wins\": 86,\"losses\": 76},\n\t\t\t{\"team\": \"astros\",\"abbr\": \"HOU\",\"wins\": 84,\"losses\": 78},\n\t\t\t{\"team\": \"angels\",\"abbr\": \"LAA\",\"wins\": 74,\"losses\": 88},\n\t\t\t{\"team\": \"athletics\",\"abbr\": \"OAK\",\"wins\": 69,\"losses\": 93},\n\t\t];\n\n\t\t$(\"#sim-button\").hide();\n\t\t// hands off the standigs, gamelogs, and threshold to the simulation\n\t\trunSim(standings, simData, sliderValue);\n\t});\n\n\n\t// ****** FORMATTING THE DATA ******\n\n\tfunction runSim(standings, simData, rate) {\n\n\t\t$(\"#sim-chart .chart-body\").html(\"\");\n\n\t\t// clear our oneRunners, opponent and teamIndex variables\n\t\tvar oneRunners = [];\n\t\tvar opponent, teamIndex;\n\n\n\t\t// iterate over the original gamelogs to find if the rangers won/loss a one-run\n\t\t// game. if so, update the standings by removing the win/loss from the rangers\n\t\t// record. if it was a divisional opponent, also remove their win/loss\n\t\t// we also populate the oneRunners array with those games, which we'll use to run the sim\n\n\t\t$.each(simData, function(k,v) {\n\t\t\tif (v.one_run_win === true) {\n\t\t\t\toneRunners.push(v);\n\n\t\t\t\t//update the rangers win total\n\t\t\t\tstandings[0].wins--; //updating the rangers win total\n\n\t\t\t\t// find the opponent\n\t\t\t\topponent = v.opponent;\n\t\t\t\tconsole.log(opponent);\n\t\t\t\t// checking if the opponent is in the division. if so, update their loss total\n\t\t\t\tteamIndex = _.findIndex(standings, function(o) {return o.abbr == opponent;});\n\t\t\t\tconsole.log(teamIndex);\n\t\t\t\tif (teamIndex !== -1) {\n\t\t\t\t\tconsole.log(standings[teamIndex]);\n\t\t\t\t\tstandings[teamIndex].losses--;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (v.one_run_loss === true) {\n\t\t\t\toneRunners.push(v);\n\n\t\t\t\t//update the rangers loss total\n\t\t\t\tstandings[0].losses--;\n\n\t\t\t\t// find opponent\n\t\t\t\topponent = v.opponent;\n\n\t\t\t\t// check if the opponent is a divisional oppennt, and if so, update their win total\n\t\t\t\tteamIndex = _.findIndex(standings, function(o) {return o.abbr == opponent;});\n\t\t\t\tif (teamIndex !== -1) {\n\t\t\t\t\tconsole.log(\"opp win\", standings[teamIndex]);\n\t\t\t\t\tstandings[teamIndex].wins--;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\n\n\t\t// ****** RUNNING THE SIMULATION ******\n\n\t\t// reset the rate to be a decimal\n\t\trate = rate / 100;\n\n\t\t// clearing our opponent and teamIndex variables for reuse in the simulation\n\t\topponent = \"\";\n\t\tteamIndex = 0;\n\n\t\tvar winsLosses = [];\n\n\t\t// go through the games in oneRunners and decide a fictional outcome based on the win rate supplied\n\t\t$.each(oneRunners, function(k,v) {\n\n\t\t\tvar currentOutcome;\n\n\t\t\t// grab a random number, and see if it's less than (a win) or greater than (a loss)\n\t\t\t// our supplied win rate\n\t\t\tvar n = Math.random();\n\n\t\t\t// if the random number is less than our win rate, that counts as a win\n\t\t\t// so, we update the rangers win total, check if the opponent is a divisional\n\t\t\t// opponent, and if so, update their loss total in the standings\n\t\t\tif (n <= rate) {\n\t\t\t\twinsLosses.push(\"win\");\n\t\t\t\tstandings[0].wins +=1;\n\t\t\t\topponent = v.opponent;\n\t\t\t\tteamIndex = _.findIndex(standings, function(o) {return o.abbr == opponent;});\n\t\t\t\tif (teamIndex !== -1) {\n\t\t\t\t\tstandings[teamIndex].losses += 1;\n\t\t\t\t}\n\n\t\t\t\t// $(\"#simChart\").append(\"<span class='game-log one-run-win'></span>\");\n\n\t\t\t// else, if the random number is greater than the win rate, it counts\n\t\t\t// as a loss, so we update the rangers loss total in the standings, check\n\t\t\t// if the opponent is a divisonal opponent, and if so, update their win total\n\t\t\t} else {\n\t\t\t\twinsLosses.push(\"loss\");\n\t\t\t\tstandings[0].losses+= 1;\n\t\t\t\topponent = v.opponent;\n\t\t\t\tteamIndex = _.findIndex(standings, function(o) {return o.abbr == opponent;});\n\t\t\t\tif (teamIndex !== -1) {\n\t\t\t\t\tstandings[teamIndex].wins+=1;\n\t\t\t\t}\n\n\t\t\t\t// $(\"#simChart\").append(\"<span class='game-log one-run-loss'></span>\");\n\t\t\t}\n\n\t\t});\n\n\t\tfor (i=0; i<winsLosses.length; i++) {\n\n\t\t\tsetTimeout(function(x) {\n\t\t\t\treturn function() {\n\t\t\t\t\tif (winsLosses[x] === \"win\") {\n\t\t\t\t\t\t$(\"#sim-chart .chart-body\").append(\"<span class='game-log one-run-win'>W</span>\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$(\"#sim-chart .chart-body\").append(\"<span class='game-log one-run-loss'>L</span>\");\n\t\t\t\t\t}\n\n\t\t\t\t\tif (x === winsLosses.length - 1) {\n\t\t\t\t\t\t// now that our standings have been simulated, we want to redorder the\n\t\t\t\t\t\t// array by team wins\n\t\t\t\t\t\tstandings = _.orderBy(standings, \"wins\", \"desc\");\n\n\t\t\t\t\t\t// set a variable equal to the number of wins of the highest team\n\t\t\t\t\t\tvar leadWins = standings[0].wins;\n\n\t\t\t\t\t\t// go through the standings again, figuring out how how many games behind\n\t\t\t\t\t\t// each team is from the first-place team, and each team's win percentage\n\t\t\t\t\t\t// then update the html standings table with the new wins, losses, win perct.,\n\t\t\t\t\t\t// and games behind totals\n\t\t\t\t\t\t$.each(standings, function(k,v) {\n\t\t\t\t\t\t\tvar gamesBack = leadWins - v.wins;\n\t\t\t\t\t\t\tv.games_behind = gamesBack;\n\t\t\t\t\t\t\tv.pct = (v.wins / (v.wins + v.losses)).toFixed(3).slice(1,5);\n\n\t\t\t\t\t\t\t$(\"#\" + v.team + \"-row\").children(\"td\").eq(1).text(v.wins);\n\t\t\t\t\t\t\t$(\"#\" + v.team + \"-row\").children(\"td\").eq(2).text(v.losses);\n\t\t\t\t\t\t\t$(\"#\" + v.team + \"-row\").children(\"td\").eq(3).text(v.pct);\n\t\t\t\t\t\t\t$(\"#\" + v.team + \"-row\").children(\"td\").eq(4).text(v.games_behind);\n\n\t\t\t\t\t\t\t// each table row is absolutely positioned within the table so we can\n\t\t\t\t\t\t\t// animate the change in position after the simulation runs. We know each\n\t\t\t\t\t\t\t// table row is 29px tall, so we just multiply that by the key of that particular\n\t\t\t\t\t\t\t// team in the `standings` array.\n\t\t\t\t\t\t\t$(\"#\" + v.team + \"-row\").css(\"top\", \"calc(29px * \" + (k + 1) + \")\");\n\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t$(\"#sim-button\").text(\"Re-run simulation\").show();\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t}(i), 100*i);\n\t\t}\n\t}\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// CHANGING THE OPPONENT FOR THE GAME LOG CHART /////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\t$(\"#opponents-selector\").click(function(event) {\n\t\tevent.stopPropagation();\n\t\t$(\"#opponents-selector\").siblings(\"ul\").removeClass(\"no-show\");\n\n\t});\n\n\t$(\"#opponents-selector\").siblings(\"ul\").children(\"li\").on(\"click\", function(event) {\n\t\tevent.stopPropagation();\n\t\tselectedTeam = $(this).attr(\"data-team\");\n\t\tmascot = $(this).text();\n\n\t\t$(this).parents(\"ul\").addClass(\"no-show\");\n\n\t\t$(\"#opponents-selector .team\").text(mascot + \": \");\n\n\t\t$.getJSON(\"assets/python-scripts/json/team-skeds/\"+selectedTeam+\"-game-logs.json\", function(data) {\n\n\t\t\tvar oppWL = {\n\t\t\t\t\"wins\": 0,\n\t\t\t\t\"losses\": 0\n\t\t\t};\n\n\t\t\t$.each(data, function(k, v) {\n\t\t\t\tif (v.one_run_win === true) {\n\t\t\t\t\toppWL.wins ++;\n\t\t\t\t} else if (v.one_run_loss === true) {\n\t\t\t\t\toppWL.losses ++;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t$(\"#opp-total\").text(oppWL.wins + \"-\" + oppWL.losses);\n\n\t\t\tdrawGameLogs(data, \"#opp-game-log-chart\");\n\t\t\tdrawWinsLosses(oppWL, \"#opp-wins-losses\");\n\n\t\t});\n\n\t\tdrawNinthWins(selectedTeam, \"#opp-ninth-wins\");\n\t});\n\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// SETTING UP THE SLIDER ELEMENT ////////////////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\n\tvar slider = document.getElementById(\"slider\");\n\n\tnoUiSlider.create(slider, {\n\t\tstart: [77],\n\t\trange: {\n\t\t\t\"min\": [0],\n\t\t\t\"max\": [100]\n\t\t},\n\t\tformat: wNumb({\n\t\t\tdecimals: 0\n\t\t})\n\t});\n\n\tslider.noUiSlider.on(\"update\", function(values, handle) {\n\t\tsliderValue = values[handle];\n\t\t$(\"#slider-value\").text(sliderValue + \"%\").css(\"left\", sliderValue + \"%\");\n\t});\n\n\n\n\n\n\t////////////////////////////////////////////////////////////////////////////\n\t///// DRAWING THE LATE AND CLOSE SCATTER PLOTS /////////////////////////////\n\t////////////////////////////////////////////////////////////////////////////\n\n\tvar hittingFormat = d3.format(\".03f\");\n\tvar pitchingFormat = d3.format(\".02f\");\n\n\n\tfunction drawLC(leagueHittingData, rangersHittingData, allHittingData, hittingAverages, hittingTarget, leaguePitchingData, rangersPitchingData, allPitchingData, pitchingAverages, pitchingTarget) {\n\n\t\tvar margin = {\n\t\t  top: 10,\n\t\t  right: 20,\n\t\t  bottom: 50,\n\t\t  left: 50\n\t\t};\n\n\t\t// our target divs for our charts are the same dimentions, so we can just\n\t\t// use one of them to set width, height and halfpoints for both\n\t\tvar width = $(hittingTarget).width() - margin.left - margin.right;\n\t\tvar height = 400;\n\n\t\tvar halfpoint = (width - margin.left - margin.right) / 2;\n\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t///// SCALES AND AXIS FOR HITTERS //////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t// SCALES FOR HITTING CHART\n\n\t\tvar xScaleHitting = d3.scaleLinear()\n\t\t\t.domain ([0, d3.max(allHittingData, function(d) {return d.lc_batting_average;})])\n\t\t\t.range([0, width]);\n\n\t\tvar yScaleHitting = d3.scaleLinear()\n\t\t\t.domain ([0, d3.max(allHittingData, function(d) {\n\t\t\t\treturn d.lc_runs_produced;\n\t\t\t})])\n\t\t\t.range([height, 0]);\n\n\n\t\t// AXIS FOR HITTERS\n\n\t\tvar xAxisHitting = d3.axisBottom(xScaleHitting).tickValues([.100,.200,.300,.400]).tickFormat(function(d) {return hittingFormat(d).slice(1);}).tickSize(-height);\n\t\tvar yAxisHitting = d3.axisLeft(yScaleHitting).ticks(6).tickSize(-width);\n\n\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t///// SCALES AND AXIS FOR PITCHERS /////////////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t// SCALES FOR THE PITCHING CHART\n\n\t\tvar xScalePitching = d3.scaleLinear()\n\t\t\t\t.domain ([0, d3.max(allPitchingData, function(d) {return d.lc_inning_pitched;})])\n\t\t\t\t.range([0, width]);\n\n\t\tvar yScalePitching = d3.scaleLinear()\n\t\t\t.domain ([0, d3.max(allPitchingData, function(d) {\n\t\t\t\treturn d.lc_era;\n\t\t\t})])\n\t\t\t.range([height, 0]);\n\n\n\t\t// AXIS FOR THE PITCHING CHART\n\n\t\tvar xAxisPitching = d3.axisBottom(xScalePitching).ticks(6).tickSize(-height);\n\t\tvar yAxisPitching = d3.axisLeft(yScalePitching).tickValues([2.00, 4.00, 6.00, 8.00, 10.00]).tickSize(-width).tickFormat(function(d) {return pitchingFormat(d);});\n\n\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t///// DRAWING THE SVG ELEMENTS FOR HITTERS /////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t// CREATING SVG ELEMENTS FOR THE HITTING CHART\n\n\t\tvar hittingSVG = d3.select(hittingTarget).append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\thittingSVG.append(\"rect\")\n\t\t\t.attr(\"x\", xScaleHitting(hittingAverages[0]))\n\t\t\t.attr(\"y\", 0)\n\t\t\t.attr(\"width\", width - xScaleHitting(hittingAverages[0]))\n\t\t\t.attr(\"height\", height - (height - yScaleHitting(hittingAverages[1])))\n\t\t\t.attr(\"fill\", \"rgb(225,225,225)\");\n\n\t\thittingSVG.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"id\", \"axis-x\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + height +\")\")\n\t\t\t.call(xAxisHitting);\n\n\t\thittingSVG.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"id\", \"axis-y\")\n\t\t\t.call(yAxisHitting);\n\n\t\t// DRAWING THE AVERAGE LINES FOR THE HITTING CHART\n\n\n\n\t\thittingSVG.append(\"line\")\n\t\t\t.attr(\"x1\", xScaleHitting(hittingAverages[0]))\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", xScaleHitting(hittingAverages[0]))\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"class\", \"avgPAs\")\n\t\t\t.attr(\"stroke\", \"#424242\");\n\n\t\thittingSVG.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", yScaleHitting(hittingAverages[1]))\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", yScaleHitting(hittingAverages[1]))\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"class\", \"avgRunsProd\")\n\t\t\t.attr(\"stroke\", \"#424242\");\n\n\n\n\t\tvar leagueHitters = hittingSVG.selectAll(\".dot\")\n\t\t\t.data(leagueHittingData)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\treturn xScaleHitting(d.lc_batting_average);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn yScaleHitting(d.lc_runs_produced);\n\t\t\t})\n\t\t\t.attr(\"class\", \"dot\")\n\t\t\t.attr(\"r\", 6);\n\n\t\tvar rangersHitters = hittingSVG.selectAll(\".ranger\")\n\t\t\t.data(rangersHittingData)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\treturn xScaleHitting(d.lc_batting_average);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn yScaleHitting(d.lc_runs_produced);\n\t\t\t})\n\t\t\t.attr(\"class\", \"ranger\")\n\t\t\t.attr(\"r\", 6);\n\n\t\tvar rangersHittingLabels = hittingSVG.selectAll(\".ranger-label\")\n\t\t\t.data(rangersHittingData)\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"text-anchor\", function(d) {\n\t\t\t\tif (d.player === \"Jurickson Profar\") {\n\t\t\t\t\treturn \"start\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"end\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(\"x\", function(d) {\n\t\t\t\tif (d.player===\"Jurickson Profar\") {\n\t\t\t\t\treturn xScaleHitting(d.lc_batting_average) + 8;\n\t\t\t\t} else {\n\t\t\t\t\treturn xScaleHitting(d.lc_batting_average) - 8;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(\"y\", function(d) {\n\t\t\t\tif (d.player === \"Mitch Moreland\" || d.player === \"Jurickson Profar\") {\n\t\t\t\t\treturn yScaleHitting(d.lc_runs_produced) - 4;\n\t\t\t\t} else {\n\t\t\t\t\treturn yScaleHitting(d.lc_runs_produced) + 4;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(\"class\", \"ranger-label\")\n\t\t\t.text(function(d) {\n\t\t\t\tvar name = d.player.split(\" \");\n\t\t\t\treturn name[1];\n\t\t\t});\n\n\t\t// DRAWING THE HITTING CHART LABELS\n\n\t\thittingSVG.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t  .attr(\"x\", height / 2 * -1)\n\t\t  .attr(\"y\", -40)\n\t\t  .attr(\"transform\", \"rotate(-90)\")\n\t\t  .attr(\"class\", \"axis-label\")\n\t\t  .text(\"Late and Close Runs Produced\");\n\n\t\thittingSVG.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t  .attr(\"y\", height + 30)\n\t\t  .attr(\"x\", width / 2)\n\t\t  .attr(\"class\", \"axis-label\")\n\t\t  .text(\"Late and Close Batting Avg.\");\n\n\n\n\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t///// DRAWING THE SVG ELEMENTS FOR PITCHERS ////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\t// CREATING SVG ELEMENTS FOR THE PITCHING CHART\n\n\t\tvar pitchingSVG = d3.select(pitchingTarget).append(\"svg\")\n\t\t\t.attr(\"width\", width + margin.left + margin.right)\n\t\t\t.attr(\"height\", height + margin.top + margin.bottom)\n\t\t\t.append(\"g\")\n\t\t\t.attr(\"transform\", \"translate(\" + margin.left + \",\" + margin.top + \")\");\n\n\t\tpitchingSVG.append(\"rect\")\n\t\t\t.attr(\"x\", xScalePitching(pitchingAverages[0]))\n\t\t\t.attr(\"y\", yScalePitching(pitchingAverages[1]))\n\t\t\t.attr(\"width\", width - xScalePitching(pitchingAverages[0]))\n\t\t\t.attr(\"height\", height - yScalePitching(pitchingAverages[1]))\n\t\t\t.attr(\"fill\", \"rgb(225,225,225)\");\n\n\t\tpitchingSVG.append(\"g\")\n\t\t\t.attr(\"class\", \"x axis\")\n\t\t\t.attr(\"id\", \"axis-x\")\n\t\t\t.attr(\"transform\", \"translate(0,\" + height +\")\")\n\t\t\t.call(xAxisPitching);\n\n\t\tpitchingSVG.append(\"g\")\n\t\t\t.attr(\"class\", \"y axis\")\n\t\t\t.attr(\"id\", \"axis-y\")\n\t\t\t.call(yAxisPitching);\n\n\t\t// CREATING AVERAGE LINES FOR THE PITCHING CHART\n\n\t\tpitchingSVG.append(\"line\")\n\t\t\t.attr(\"x1\", xScalePitching(pitchingAverages[0]))\n\t\t\t.attr(\"y1\", 0)\n\t\t\t.attr(\"x2\", xScalePitching(pitchingAverages[0]))\n\t\t\t.attr(\"y2\", height)\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"class\", \"avgIPs\")\n\t\t\t.attr(\"stroke\", \"#424242\");\n\n\t\tpitchingSVG.append(\"line\")\n\t\t\t.attr(\"x1\", 0)\n\t\t\t.attr(\"y1\", yScalePitching(pitchingAverages[1]))\n\t\t\t.attr(\"x2\", width)\n\t\t\t.attr(\"y2\", yScalePitching(pitchingAverages[1]))\n\t\t\t.attr(\"stroke-width\", 2)\n\t\t\t.attr(\"class\", \"avgERA\")\n\t\t\t.attr(\"stroke\", \"#424242\");\n\n\t\tvar leaguePitchers = pitchingSVG.selectAll(\".dot\")\n\t\t\t.data(leaguePitchingData)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\treturn xScalePitching(d.lc_inning_pitched);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn yScalePitching(d.lc_era);\n\t\t\t})\n\t\t\t.attr(\"class\", \"dot\")\n\t\t\t.attr(\"r\", 6);\n\n\t\tvar rangersPitchers = pitchingSVG.selectAll(\".ranger\")\n\t\t\t.data(rangersPitchingData)\n\t\t\t.enter()\n\t\t\t.append(\"circle\")\n\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\treturn xScalePitching(d.lc_inning_pitched);\n\t\t\t})\n\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\treturn yScalePitching(d.lc_era);\n\t\t\t})\n\t\t\t.attr(\"class\", \"ranger\")\n\t\t\t.attr(\"r\", 6);\n\n\t\tvar rangersPitchingLabels = pitchingSVG.selectAll(\".ranger-label\")\n\t\t\t.data(rangersPitchingData)\n\t\t\t.enter()\n\t\t\t.append(\"text\")\n\t\t\t.attr(\"text-anchor\", function(d) {\n\t\t\t\tif (d.player === \"Tony Barnette\") {\n\t\t\t\t\treturn \"end\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"start\";\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(\"x\", function(d) {\n\t\t\t\tif (d.player===\"Tony Barnette\") {\n\t\t\t\t\treturn xScalePitching(d.lc_inning_pitched) - 8;\n\t\t\t\t} else {\n\t\t\t\t\treturn xScalePitching(d.lc_inning_pitched) + 8;\n\t\t\t\t}\n\t\t\t})\n\t\t\t.attr(\"y\", function(d) {\n\t\t\t\treturn yScalePitching(d.lc_era) + 4;\n\t\t\t})\n\t\t\t.attr(\"class\", \"ranger-label\")\n\t\t\t.text(function(d) {\n\t\t\t\tvar name = d.player.split(\" \");\n\t\t\t\treturn name[1];\n\t\t\t});\n\n\n\t\t// CREATING LABELS FOR THE PITCHING CHART\n\n\t\tpitchingSVG.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t  .attr(\"x\", height / 2 * -1)\n\t\t  .attr(\"y\", -40)\n\t\t  .attr(\"transform\", \"rotate(-90)\")\n\t\t  .attr(\"class\", \"axis-label\")\n\t\t  .text(\"Late and Close ERA\");\n\n\t\tpitchingSVG.append(\"text\")\n\t\t  .attr(\"text-anchor\", \"middle\")\n\t\t  .attr(\"y\", height + 30)\n\t\t  .attr(\"x\", width / 2)\n\t\t  .attr(\"class\", \"axis-label\")\n\t\t  .text(\"Late and Close Inn. Pitched (Min: 10)\");\n\n\n\n\n\t\t////////////////////////////////////////////////////////////////////////\n\t\t///// UPDATING THE CHARTS WITH THE DROPDOWN ////////////////////////////\n\t\t////////////////////////////////////////////////////////////////////////\n\n\t\td3.selectAll(\".late-li\")\n\t\t\t.on(\"click\", function() {\n\n\t\t\t\td3.selectAll(\".custom-list\").classed(\"no-show\", true);\n\n\t\t\t\t// dumping out our filtered data and starting from scratch\n\t\t\t\tvar filteredHitters = [];\n\t\t\t\tvar filteredPitchers = [];\n\n\t\t\t\t// grab the selected option element, then drill down to it's data-team attribute\n\t\t\t\tvar selectedTeam = d3.select(this).attr(\"data-team\");\n\t\t\t\tvar mascot = d3.select(this).text();\n\n\t\t\t\td3.select(\".late-team\").text(mascot);\n\t\t\t\t// checking to see if we've selected \"all teams\". If we have, set the\n\t\t\t\t// filtered data arrays to the entire data set\n\t\t\t\tif (selectedTeam === \"ALL\") {\n\t\t\t\t\tfilteredHitters = leagueHittingData;\n\t\t\t\t\tfilteredPitchers = leaguePitchingData;\n\t\t\t\t} else {\n\n\t\t\t\t\t// go through the hitting and pitching data and populate the\n\t\t\t\t\t// filtered data arrays with players that match the selected team\n\t\t\t\t\t$.each(leagueHittingData, function(k,v) {\n\t\t\t\t\t\tif (v.team === selectedTeam) {\n\t\t\t\t\t\t\tfilteredHitters.push(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t$.each(leaguePitchingData, function(k,v) {\n\t\t\t\t\t\tif (v.team === selectedTeam) {\n\t\t\t\t\t\t\tfilteredPitchers.push(v);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t}\n\n\t\t\t\t// rebind the new hitting data to the dots\n\t\t\t\thittingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredHitters)\n\t\t\t\t\t.transition()\n\t\t\t\t\t.duration(500)\n\t\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\t\treturn xScaleHitting(d.lc_batting_average);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\t\treturn yScaleHitting(d.lc_runs_produced);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", function(d) {\n\t\t\t\t\t\treturn \"dot\";\n\t\t\t\t\t});\n\n\t\t\t\t// enter any new circles for hitters that do not currently exist\n\t\t\t\thittingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredHitters)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t.attr(\"class\", \"dot\")\n\t\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\t\treturn xScaleHitting(d.lc_batting_average);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\t\treturn yScaleHitting(d.lc_runs_produced);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", function(d) {\n\t\t\t\t\t\treturn \"dot\";\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t\t.attr(\"fill\", \"red\");\n\n\t\t\t\t// remove any circles for hitters that are no longer needed\n\t\t\t\thittingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredHitters)\n\t\t\t\t\t.exit().remove();\n\n\n\t\t\t\t// rebind the new pitching data to the dots\n\t\t\t\tpitchingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredPitchers)\n\t\t\t\t\t.transition()\n\t\t\t\t\t.duration(500)\n\t\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\t\treturn xScalePitching(d.lc_inning_pitched);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\t\treturn yScalePitching(d.lc_era);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", function(d) {\n\t\t\t\t\t\tif (d.team === \"TEX\") {\n\t\t\t\t\t\t\treturn \"dot ranger\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"dot\";\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t// enter any new circles for pitchers that don't exist yet\n\t\t\t\tpitchingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredPitchers)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append(\"circle\")\n\t\t\t\t\t.attr(\"class\", \"dot\")\n\t\t\t\t\t.attr(\"cx\", function(d) {\n\t\t\t\t\t\treturn xScalePitching(d.lc_inning_pitched);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"cy\", function(d) {\n\t\t\t\t\t\treturn yScalePitching(d.lc_era);\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"class\", function(d) {\n\t\t\t\t\t\tif (d.team === \"TEX\") {\n\t\t\t\t\t\t\treturn \"dot ranger\";\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\treturn \"dot\";\n\t\t\t\t\t\t}\n\t\t\t\t\t})\n\t\t\t\t\t.attr(\"r\", 5)\n\t\t\t\t\t.attr(\"fill\", \"red\");\n\n\n\t\t\t\t// remove any circles for pitchers that are no longer needed\n\t\t\t\tpitchingSVG.selectAll(\".dot\")\n\t\t\t\t\t.data(filteredPitchers)\n\t\t\t\t\t.exit().remove();\n\n\t\t\t});\n\n\t}\n\n\t$(\"#late-selector\").click(function(event) {\n\t\tevent.stopPropagation();\n\t\t$(\"#late-selector\").siblings(\"ul\").removeClass(\"no-show\");\n\t});\n\n\t$(\"#late-selector li\").click(function(event) {\n\t\t$(\"#late-selector ul\").addClass(\"no-show\");\n\t});\n\n\n\tvar lateHitters = [];\n\tvar latePitchers = [];\n\n\tvar leagueHitters = [];\n\tvar rangersHitters = [];\n\n\tvar leaguePitchers = [];\n\tvar rangersPitchers = [];\n\n\tvar hittingAverages = [];\n\tvar pitchingAverages = [];\n\n\n\tvar lcQueue = 0;\n\n\t$.getJSON(\"assets/python-scripts/json/runs-late-and-close.json\", function(data) {\n\n\t\tlateHitters = data;\n\n\t\tvar totalHits = 0;\n\t\tvar totalABs = 0;\n\t\tvar totalRunsProd = 0;\n\t\t// var totalPAs = 0;\n\n\t\t$.each(data, function(k,v) {\n\t\t\tif (v.team !== \"TEX\") {\n\t\t\t\tleagueHitters.push(v);\n\t\t\t} else {\n\t\t\t\trangersHitters.push(v);\n\t\t\t}\n\n\t\t\ttotalHits += v.lc_hits;\n\t\t\ttotalABs += v.lc_ab;\n\t\t\ttotalRunsProd += v.lc_runs_produced;\n\t\t\t// totalPAs += v.lc_plate_app;\n\n\t\t});\n\n\t\tconsole.log(totalRunsProd, data.length);\n\t\t// var avgPAs = totalPAs / data.length;\n\t\tvar avgRunsProd = totalRunsProd / data.length;\n\t\tvar avgAvg = totalHits / totalABs;\n\n\t\t// hittingAverages[0] = avgPAs;\n\t\thittingAverages[1] = avgRunsProd;\n\t\thittingAverages[0] = avgAvg;\n\n\t\tconsole.log(hittingAverages);\n\t\tlcQueue++;\n\n\t\tif (lcQueue === 2) {\n\t\t\tdrawLC(leagueHitters, rangersHitters, lateHitters, hittingAverages, \"#late-and-close-hitting\", leaguePitchers, rangersPitchers, latePitchers, pitchingAverages, \"#late-and-close-pitching\");\n\t\t}\n\n\t});\n\n\t$.getJSON(\"assets/python-scripts/json/pitchers-late-and-close.json\", function(data) {\n\t\tlatePitchers = data;\n\n\t\tvar totalERs = 0;\n\t\tvar wholeInns = 0;\n\t\tvar partialInns = 0;\n\n\t\t$.each(data, function(k,v) {\n\t\t\tif (v.team !== \"TEX\") {\n\t\t\t\tleaguePitchers.push(v);\n\t\t\t} else {\n\t\t\t\trangersPitchers.push(v);\n\t\t\t}\n\n\t\t\tvar wholeIPs = Math.floor(v.lc_inning_pitched);\n\t\t\tvar partialIPs = Math.floor((v.lc_inning_pitched - wholeIPs) * 10);\n\n\t\t\ttotalERs += v.lc_earned_runs;\n\n\t\t\twholeInns += wholeIPs;\n\t\t\tpartialInns += partialIPs;\n\n\t\t});\n\n\n\t\tvar totalOuts = (wholeInns * 3) + partialInns;\n\t\tvar totalIPs = totalOuts / 3;\n\n\t\tvar avgERA = (9 * (totalERs / totalIPs));\n\t\tavgERA = Math.round(avgERA * 100) / 100;\n\n\t\tvar avgIPs = totalIPs / data.length;\n\n\t\tpitchingAverages[0] = avgIPs;\n\t\tpitchingAverages[1] = avgERA;\n\n\t\tlcQueue++;\n\n\t\tif (lcQueue === 2) {\n\t\t\tdrawLC(leagueHitters, rangersHitters, lateHitters, hittingAverages, \"#late-and-close-hitting\", leaguePitchers, rangersPitchers, latePitchers, pitchingAverages, \"#late-and-close-pitching\");\n\t\t}\n\t});\n\n});\n","/*! nouislider - 9.0.0 - 2016-09-29 21:44:02 */\n\n!function(a){\"function\"==typeof define&&define.amd?define([],a):\"object\"==typeof exports?module.exports=a():window.noUiSlider=a()}(function(){\"use strict\";function a(a,b){var c=document.createElement(\"div\");return j(c,b),a.appendChild(c),c}function b(a){return a.filter(function(a){return!this[a]&&(this[a]=!0)},{})}function c(a,b){return Math.round(a/b)*b}function d(a,b){var c=a.getBoundingClientRect(),d=a.ownerDocument,e=d.documentElement,f=m();return/webkit.*Chrome.*Mobile/i.test(navigator.userAgent)&&(f.x=0),b?c.top+f.y-e.clientTop:c.left+f.x-e.clientLeft}function e(a){return\"number\"==typeof a&&!isNaN(a)&&isFinite(a)}function f(a,b,c){c>0&&(j(a,b),setTimeout(function(){k(a,b)},c))}function g(a){return Math.max(Math.min(a,100),0)}function h(a){return Array.isArray(a)?a:[a]}function i(a){a=String(a);var b=a.split(\".\");return b.length>1?b[1].length:0}function j(a,b){a.classList?a.classList.add(b):a.className+=\" \"+b}function k(a,b){a.classList?a.classList.remove(b):a.className=a.className.replace(new RegExp(\"(^|\\\\b)\"+b.split(\" \").join(\"|\")+\"(\\\\b|$)\",\"gi\"),\" \")}function l(a,b){return a.classList?a.classList.contains(b):new RegExp(\"\\\\b\"+b+\"\\\\b\").test(a.className)}function m(){var a=void 0!==window.pageXOffset,b=\"CSS1Compat\"===(document.compatMode||\"\"),c=a?window.pageXOffset:b?document.documentElement.scrollLeft:document.body.scrollLeft,d=a?window.pageYOffset:b?document.documentElement.scrollTop:document.body.scrollTop;return{x:c,y:d}}function n(){return window.navigator.pointerEnabled?{start:\"pointerdown\",move:\"pointermove\",end:\"pointerup\"}:window.navigator.msPointerEnabled?{start:\"MSPointerDown\",move:\"MSPointerMove\",end:\"MSPointerUp\"}:{start:\"mousedown touchstart\",move:\"mousemove touchmove\",end:\"mouseup touchend\"}}function o(a,b){return 100/(b-a)}function p(a,b){return 100*b/(a[1]-a[0])}function q(a,b){return p(a,a[0]<0?b+Math.abs(a[0]):b-a[0])}function r(a,b){return b*(a[1]-a[0])/100+a[0]}function s(a,b){for(var c=1;a>=b[c];)c+=1;return c}function t(a,b,c){if(c>=a.slice(-1)[0])return 100;var d,e,f,g,h=s(c,a);return d=a[h-1],e=a[h],f=b[h-1],g=b[h],f+q([d,e],c)/o(f,g)}function u(a,b,c){if(c>=100)return a.slice(-1)[0];var d,e,f,g,h=s(c,b);return d=a[h-1],e=a[h],f=b[h-1],g=b[h],r([d,e],(c-f)*o(f,g))}function v(a,b,d,e){if(100===e)return e;var f,g,h=s(e,a);return d?(f=a[h-1],g=a[h],e-f>(g-f)/2?g:f):b[h-1]?a[h-1]+c(e-a[h-1],b[h-1]):e}function w(a,b,c){var d;if(\"number\"==typeof b&&(b=[b]),\"[object Array]\"!==Object.prototype.toString.call(b))throw new Error(\"noUiSlider: 'range' contains invalid value.\");if(d=\"min\"===a?0:\"max\"===a?100:parseFloat(a),!e(d)||!e(b[0]))throw new Error(\"noUiSlider: 'range' value isn't numeric.\");c.xPct.push(d),c.xVal.push(b[0]),d?c.xSteps.push(!isNaN(b[1])&&b[1]):isNaN(b[1])||(c.xSteps[0]=b[1]),c.xHighestCompleteStep.push(0)}function x(a,b,c){if(!b)return!0;c.xSteps[a]=p([c.xVal[a],c.xVal[a+1]],b)/o(c.xPct[a],c.xPct[a+1]);var d=(c.xVal[a+1]-c.xVal[a])/c.xNumSteps[a],e=Math.ceil(Number(d.toFixed(3))-1),f=c.xVal[a]+c.xNumSteps[a]*e;c.xHighestCompleteStep[a]=f}function y(a,b,c,d){this.xPct=[],this.xVal=[],this.xSteps=[d||!1],this.xNumSteps=[!1],this.xHighestCompleteStep=[],this.snap=b,this.direction=c;var e,f=[];for(e in a)a.hasOwnProperty(e)&&f.push([a[e],e]);for(f.length&&\"object\"==typeof f[0][0]?f.sort(function(a,b){return a[0][0]-b[0][0]}):f.sort(function(a,b){return a[0]-b[0]}),e=0;e<f.length;e++)w(f[e][1],f[e][0],this);for(this.xNumSteps=this.xSteps.slice(0),e=0;e<this.xNumSteps.length;e++)x(e,this.xNumSteps[e],this)}function z(a,b){if(!e(b))throw new Error(\"noUiSlider: 'step' is not numeric.\");a.singleStep=b}function A(a,b){if(\"object\"!=typeof b||Array.isArray(b))throw new Error(\"noUiSlider: 'range' is not an object.\");if(void 0===b.min||void 0===b.max)throw new Error(\"noUiSlider: Missing 'min' or 'max' in 'range'.\");if(b.min===b.max)throw new Error(\"noUiSlider: 'range' 'min' and 'max' cannot be equal.\");a.spectrum=new y(b,a.snap,a.dir,a.singleStep)}function B(a,b){if(b=h(b),!Array.isArray(b)||!b.length)throw new Error(\"noUiSlider: 'start' option is incorrect.\");a.handles=b.length,a.start=b}function C(a,b){if(a.snap=b,\"boolean\"!=typeof b)throw new Error(\"noUiSlider: 'snap' option must be a boolean.\")}function D(a,b){if(a.animate=b,\"boolean\"!=typeof b)throw new Error(\"noUiSlider: 'animate' option must be a boolean.\")}function E(a,b){if(a.animationDuration=b,\"number\"!=typeof b)throw new Error(\"noUiSlider: 'animationDuration' option must be a number.\")}function F(a,b){var c,d=[!1];if(b===!0||b===!1){for(c=1;c<a.handles;c++)d.push(b);d.push(!1)}else{if(!Array.isArray(b)||!b.length||b.length!==a.handles+1)throw new Error(\"noUiSlider: 'connect' option doesn't match handle count.\");d=b}a.connect=d}function G(a,b){switch(b){case\"horizontal\":a.ort=0;break;case\"vertical\":a.ort=1;break;default:throw new Error(\"noUiSlider: 'orientation' option is invalid.\")}}function H(a,b){if(!e(b))throw new Error(\"noUiSlider: 'margin' option must be numeric.\");if(0!==b&&(a.margin=a.spectrum.getMargin(b),!a.margin))throw new Error(\"noUiSlider: 'margin' option is only supported on linear sliders.\")}function I(a,b){if(!e(b))throw new Error(\"noUiSlider: 'limit' option must be numeric.\");if(a.limit=a.spectrum.getMargin(b),!a.limit||a.handles<2)throw new Error(\"noUiSlider: 'limit' option is only supported on linear sliders with 2 or more handles.\")}function J(a,b){switch(b){case\"ltr\":a.dir=0;break;case\"rtl\":a.dir=1;break;default:throw new Error(\"noUiSlider: 'direction' option was not recognized.\")}}function K(a,b){if(\"string\"!=typeof b)throw new Error(\"noUiSlider: 'behaviour' must be a string containing options.\");var c=b.indexOf(\"tap\")>=0,d=b.indexOf(\"drag\")>=0,e=b.indexOf(\"fixed\")>=0,f=b.indexOf(\"snap\")>=0,g=b.indexOf(\"hover\")>=0;if(e){if(2!==a.handles)throw new Error(\"noUiSlider: 'fixed' behaviour must be used with 2 handles\");H(a,a.start[1]-a.start[0])}a.events={tap:c||f,drag:d,fixed:e,snap:f,hover:g}}function L(a,b){if(b!==!1)if(b===!0){a.tooltips=[];for(var c=0;c<a.handles;c++)a.tooltips.push(!0)}else{if(a.tooltips=h(b),a.tooltips.length!==a.handles)throw new Error(\"noUiSlider: must pass a formatter for all handles.\");a.tooltips.forEach(function(a){if(\"boolean\"!=typeof a&&(\"object\"!=typeof a||\"function\"!=typeof a.to))throw new Error(\"noUiSlider: 'tooltips' must be passed a formatter or 'false'.\")})}}function M(a,b){if(a.format=b,\"function\"==typeof b.to&&\"function\"==typeof b.from)return!0;throw new Error(\"noUiSlider: 'format' requires 'to' and 'from' methods.\")}function N(a,b){if(void 0!==b&&\"string\"!=typeof b&&b!==!1)throw new Error(\"noUiSlider: 'cssPrefix' must be a string or `false`.\");a.cssPrefix=b}function O(a,b){if(void 0!==b&&\"object\"!=typeof b)throw new Error(\"noUiSlider: 'cssClasses' must be an object.\");if(\"string\"==typeof a.cssPrefix){a.cssClasses={};for(var c in b)b.hasOwnProperty(c)&&(a.cssClasses[c]=a.cssPrefix+b[c])}else a.cssClasses=b}function P(a,b){if(b!==!0&&b!==!1)throw new Error(\"noUiSlider: 'useRequestAnimationFrame' option should be true (default) or false.\");a.useRequestAnimationFrame=b}function Q(a){var b,c={margin:0,limit:0,animate:!0,animationDuration:300,format:T};b={step:{r:!1,t:z},start:{r:!0,t:B},connect:{r:!0,t:F},direction:{r:!0,t:J},snap:{r:!1,t:C},animate:{r:!1,t:D},animationDuration:{r:!1,t:E},range:{r:!0,t:A},orientation:{r:!1,t:G},margin:{r:!1,t:H},limit:{r:!1,t:I},behaviour:{r:!0,t:K},format:{r:!1,t:M},tooltips:{r:!1,t:L},cssPrefix:{r:!1,t:N},cssClasses:{r:!1,t:O},useRequestAnimationFrame:{r:!1,t:P}};var d={connect:!1,direction:\"ltr\",behaviour:\"tap\",orientation:\"horizontal\",cssPrefix:\"noUi-\",cssClasses:{target:\"target\",base:\"base\",origin:\"origin\",handle:\"handle\",horizontal:\"horizontal\",vertical:\"vertical\",background:\"background\",connect:\"connect\",ltr:\"ltr\",rtl:\"rtl\",draggable:\"draggable\",drag:\"state-drag\",tap:\"state-tap\",active:\"active\",tooltip:\"tooltip\",pips:\"pips\",pipsHorizontal:\"pips-horizontal\",pipsVertical:\"pips-vertical\",marker:\"marker\",markerHorizontal:\"marker-horizontal\",markerVertical:\"marker-vertical\",markerNormal:\"marker-normal\",markerLarge:\"marker-large\",markerSub:\"marker-sub\",value:\"value\",valueHorizontal:\"value-horizontal\",valueVertical:\"value-vertical\",valueNormal:\"value-normal\",valueLarge:\"value-large\",valueSub:\"value-sub\"},useRequestAnimationFrame:!0};Object.keys(b).forEach(function(e){if(void 0===a[e]&&void 0===d[e]){if(b[e].r)throw new Error(\"noUiSlider: '\"+e+\"' is required.\");return!0}b[e].t(c,void 0===a[e]?d[e]:a[e])}),c.pips=a.pips;var e=[[\"left\",\"top\"],[\"right\",\"bottom\"]];return c.style=e[c.dir][c.ort],c.styleOposite=e[c.dir?0:1][c.ort],c}function R(c,e,i){function o(b,c){var d=a(b,e.cssClasses.origin),f=a(d,e.cssClasses.handle);return f.setAttribute(\"data-handle\",c),d}function p(b,c){return!!c&&a(b,e.cssClasses.connect)}function q(a,b){ba=[],ca=[],ca.push(p(b,a[0]));for(var c=0;c<e.handles;c++)ba.push(o(b,c)),ha[c]=c,ca.push(p(b,a[c+1]))}function r(b){j(b,e.cssClasses.target),0===e.dir?j(b,e.cssClasses.ltr):j(b,e.cssClasses.rtl),0===e.ort?j(b,e.cssClasses.horizontal):j(b,e.cssClasses.vertical),aa=a(b,e.cssClasses.base)}function s(b,c){return!!e.tooltips[c]&&a(b.firstChild,e.cssClasses.tooltip)}function t(){var a=ba.map(s);Z(\"update\",function(b,c,d){if(a[c]){var f=b[c];e.tooltips[c]!==!0&&(f=e.tooltips[c].to(d[c])),a[c].innerHTML=f}})}function u(a,b,c){if(\"range\"===a||\"steps\"===a)return ia.xVal;if(\"count\"===a){var d,e=100/(b-1),f=0;for(b=[];(d=f++*e)<=100;)b.push(d);a=\"positions\"}return\"positions\"===a?b.map(function(a){return ia.fromStepping(c?ia.getStep(a):a)}):\"values\"===a?c?b.map(function(a){return ia.fromStepping(ia.getStep(ia.toStepping(a)))}):b:void 0}function v(a,c,d){function e(a,b){return(a+b).toFixed(7)/1}var f={},g=ia.xVal[0],h=ia.xVal[ia.xVal.length-1],i=!1,j=!1,k=0;return d=b(d.slice().sort(function(a,b){return a-b})),d[0]!==g&&(d.unshift(g),i=!0),d[d.length-1]!==h&&(d.push(h),j=!0),d.forEach(function(b,g){var h,l,m,n,o,p,q,r,s,t,u=b,v=d[g+1];if(\"steps\"===c&&(h=ia.xNumSteps[g]),h||(h=v-u),u!==!1&&void 0!==v)for(h=Math.max(h,1e-7),l=u;l<=v;l=e(l,h)){for(n=ia.toStepping(l),o=n-k,r=o/a,s=Math.round(r),t=o/s,m=1;m<=s;m+=1)p=k+m*t,f[p.toFixed(5)]=[\"x\",0];q=d.indexOf(l)>-1?1:\"steps\"===c?2:0,!g&&i&&(q=0),l===v&&j||(f[n.toFixed(5)]=[l,q]),k=n}}),f}function w(a,b,c){function d(a,b){var c=b===e.cssClasses.value,d=c?m:n,f=c?k:l;return b+\" \"+d[e.ort]+\" \"+f[a]}function f(a,b,c){return'class=\"'+d(c[1],b)+'\" style=\"'+e.style+\": \"+a+'%\"'}function g(a,d){d[1]=d[1]&&b?b(d[0],d[1]):d[1],i+=\"<div \"+f(a,e.cssClasses.marker,d)+\"></div>\",d[1]&&(i+=\"<div \"+f(a,e.cssClasses.value,d)+\">\"+c.to(d[0])+\"</div>\")}var h=document.createElement(\"div\"),i=\"\",k=[e.cssClasses.valueNormal,e.cssClasses.valueLarge,e.cssClasses.valueSub],l=[e.cssClasses.markerNormal,e.cssClasses.markerLarge,e.cssClasses.markerSub],m=[e.cssClasses.valueHorizontal,e.cssClasses.valueVertical],n=[e.cssClasses.markerHorizontal,e.cssClasses.markerVertical];return j(h,e.cssClasses.pips),j(h,0===e.ort?e.cssClasses.pipsHorizontal:e.cssClasses.pipsVertical),Object.keys(a).forEach(function(b){g(b,a[b])}),h.innerHTML=i,h}function x(a){var b=a.mode,c=a.density||1,d=a.filter||!1,e=a.values||!1,f=a.stepped||!1,g=u(b,e,f),h=v(c,b,g),i=a.format||{to:Math.round};return fa.appendChild(w(h,d,i))}function y(){var a=aa.getBoundingClientRect(),b=\"offset\"+[\"Width\",\"Height\"][e.ort];return 0===e.ort?a.width||aa[b]:a.height||aa[b]}function z(a,b,c,d){var f=function(b){return!fa.hasAttribute(\"disabled\")&&(!l(fa,e.cssClasses.tap)&&(b=A(b,d.pageOffset),!(a===ea.start&&void 0!==b.buttons&&b.buttons>1)&&((!d.hover||!b.buttons)&&(b.calcPoint=b.points[e.ort],void c(b,d)))))},g=[];return a.split(\" \").forEach(function(a){b.addEventListener(a,f,!1),g.push([a,f])}),g}function A(a,b){a.preventDefault();var c,d,e=0===a.type.indexOf(\"touch\"),f=0===a.type.indexOf(\"mouse\"),g=0===a.type.indexOf(\"pointer\"),h=a;if(0===a.type.indexOf(\"MSPointer\")&&(g=!0),e){if(h.touches.length>1)return!1;c=a.changedTouches[0].pageX,d=a.changedTouches[0].pageY}return b=b||m(),(f||g)&&(c=a.clientX+b.x,d=a.clientY+b.y),h.pageOffset=b,h.points=[c,d],h.cursor=f||g,h}function B(a){var b=a-d(aa,e.ort),c=100*b/y();return e.dir?100-c:c}function C(a){var b=100,c=!1;return ba.forEach(function(d,e){if(!d.hasAttribute(\"disabled\")){var f=Math.abs(ga[e]-a);f<b&&(c=e,b=f)}}),c}function D(a,b,c,d){var e=c.slice(),f=[!a,a],g=[a,!a];d=d.slice(),a&&d.reverse(),d.length>1?d.forEach(function(a,c){var d=M(e,a,e[a]+b,f[c],g[c]);d===!1?b=0:(b=d-e[a],e[a]=d)}):f=g=[!0];var h=!1;d.forEach(function(a,d){h=R(a,c[a]+b,f[d],g[d])||h}),h&&d.forEach(function(a){E(\"update\",a),E(\"slide\",a)})}function E(a,b,c){Object.keys(ka).forEach(function(d){var f=d.split(\".\")[0];a===f&&ka[d].forEach(function(a){a.call(da,ja.map(e.format.to),b,ja.slice(),c||!1,ga.slice())})})}function F(a,b){\"mouseout\"===a.type&&\"HTML\"===a.target.nodeName&&null===a.relatedTarget&&H(a,b)}function G(a,b){if(navigator.appVersion.indexOf(\"MSIE 9\")===-1&&0===a.buttons&&0!==b.buttonsProperty)return H(a,b);var c=(e.dir?-1:1)*(a.calcPoint-b.startCalcPoint),d=100*c/b.baseSize;D(c>0,d,b.locations,b.handleNumbers)}function H(a,b){var c=aa.querySelector(\".\"+e.cssClasses.active);null!==c&&k(c,e.cssClasses.active),a.cursor&&(document.body.style.cursor=\"\",document.body.removeEventListener(\"selectstart\",document.body.noUiListener)),document.documentElement.noUiListeners.forEach(function(a){document.documentElement.removeEventListener(a[0],a[1])}),k(fa,e.cssClasses.drag),P(),b.handleNumbers.forEach(function(a){E(\"set\",a),E(\"change\",a),E(\"end\",a)})}function I(a,b){if(1===b.handleNumbers.length){var c=ba[b.handleNumbers[0]];if(c.hasAttribute(\"disabled\"))return!1;j(c.children[0],e.cssClasses.active)}a.preventDefault(),a.stopPropagation();var d=z(ea.move,document.documentElement,G,{startCalcPoint:a.calcPoint,baseSize:y(),pageOffset:a.pageOffset,handleNumbers:b.handleNumbers,buttonsProperty:a.buttons,locations:ga.slice()}),f=z(ea.end,document.documentElement,H,{handleNumbers:b.handleNumbers}),g=z(\"mouseout\",document.documentElement,F,{handleNumbers:b.handleNumbers});if(document.documentElement.noUiListeners=d.concat(f,g),a.cursor){document.body.style.cursor=getComputedStyle(a.target).cursor,ba.length>1&&j(fa,e.cssClasses.drag);var h=function(){return!1};document.body.noUiListener=h,document.body.addEventListener(\"selectstart\",h,!1)}b.handleNumbers.forEach(function(a){E(\"start\",a)})}function J(a){a.stopPropagation();var b=B(a.calcPoint),c=C(b);return c!==!1&&(e.events.snap||f(fa,e.cssClasses.tap,e.animationDuration),R(c,b,!0,!0),P(),E(\"slide\",c,!0),E(\"set\",c,!0),E(\"change\",c,!0),E(\"update\",c,!0),void(e.events.snap&&I(a,{handleNumbers:[c]})))}function K(a){var b=B(a.calcPoint),c=ia.getStep(b),d=ia.fromStepping(c);Object.keys(ka).forEach(function(a){\"hover\"===a.split(\".\")[0]&&ka[a].forEach(function(a){a.call(da,d)})})}function L(a){a.fixed||ba.forEach(function(a,b){z(ea.start,a.children[0],I,{handleNumbers:[b]})}),a.tap&&z(ea.start,aa,J,{}),a.hover&&z(ea.move,aa,K,{hover:!0}),a.drag&&ca.forEach(function(b,c){if(b!==!1&&0!==c&&c!==ca.length-1){var d=ba[c-1],f=ba[c],g=[b];j(b,e.cssClasses.draggable),a.fixed&&(g.push(d.children[0]),g.push(f.children[0])),g.forEach(function(a){z(ea.start,a,I,{handles:[d,f],handleNumbers:[c-1,c]})})}})}function M(a,b,c,d,f){return ba.length>1&&(d&&b>0&&(c=Math.max(c,a[b-1]+e.margin)),f&&b<ba.length-1&&(c=Math.min(c,a[b+1]-e.margin))),ba.length>1&&e.limit&&(d&&b>0&&(c=Math.min(c,a[b-1]+e.limit)),f&&b<ba.length-1&&(c=Math.max(c,a[b+1]-e.limit))),c=ia.getStep(c),c=g(c),c!==a[b]&&c}function N(a){return a+\"%\"}function O(a,b){ga[a]=b,ja[a]=ia.fromStepping(b);var c=function(){ba[a].style[e.style]=N(b),S(a),S(a+1)};window.requestAnimationFrame&&e.useRequestAnimationFrame?window.requestAnimationFrame(c):c()}function P(){ha.forEach(function(a){var b=ga[a]>50?-1:1,c=3+(ba.length+b*a);ba[a].childNodes[0].style.zIndex=c})}function R(a,b,c,d){return b=M(ga,a,b,c,d),b!==!1&&(O(a,b),!0)}function S(a){if(ca[a]){var b=0,c=100;0!==a&&(b=ga[a-1]),a!==ca.length-1&&(c=ga[a]),ca[a].style[e.style]=N(b),ca[a].style[e.styleOposite]=N(100-c)}}function T(a,b){null!==a&&a!==!1&&(\"number\"==typeof a&&(a=String(a)),a=e.format.from(a),a===!1||isNaN(a)||R(b,ia.toStepping(a),!1,!1))}function U(a,b){var c=h(a),d=void 0===ga[0];b=void 0===b||!!b,c.forEach(T),e.animate&&!d&&f(fa,e.cssClasses.tap,e.animationDuration),ha.forEach(function(a){R(a,ga[a],!0,!1)}),P(),ha.forEach(function(a){E(\"update\",a),null!==c[a]&&b&&E(\"set\",a)})}function V(a){U(e.start,a)}function W(){var a=ja.map(e.format.to);return 1===a.length?a[0]:a}function X(){for(var a in e.cssClasses)e.cssClasses.hasOwnProperty(a)&&k(fa,e.cssClasses[a]);for(;fa.firstChild;)fa.removeChild(fa.firstChild);delete fa.noUiSlider}function Y(){return ga.map(function(a,b){var c=ia.getNearbySteps(a),d=ja[b],e=c.thisStep.step,f=null;e!==!1&&d+e>c.stepAfter.startValue&&(e=c.stepAfter.startValue-d),f=d>c.thisStep.startValue?c.thisStep.step:c.stepBefore.step!==!1&&d-c.stepBefore.highestStep,100===a?e=null:0===a&&(f=null);var g=ia.countStepDecimals();return null!==e&&e!==!1&&(e=Number(e.toFixed(g))),null!==f&&f!==!1&&(f=Number(f.toFixed(g))),[f,e]})}function Z(a,b){ka[a]=ka[a]||[],ka[a].push(b),\"update\"===a.split(\".\")[0]&&ba.forEach(function(a,b){E(\"update\",b)})}function $(a){var b=a&&a.split(\".\")[0],c=b&&a.substring(b.length);Object.keys(ka).forEach(function(a){var d=a.split(\".\")[0],e=a.substring(d.length);b&&b!==d||c&&c!==e||delete ka[a]})}function _(a,b){var c=W(),d=[\"margin\",\"limit\",\"range\",\"animate\",\"snap\",\"step\",\"format\"];d.forEach(function(b){void 0!==a[b]&&(i[b]=a[b])});var f=Q(i);d.forEach(function(b){void 0!==a[b]&&(e[b]=f[b])}),f.spectrum.direction=ia.direction,ia=f.spectrum,e.margin=f.margin,e.limit=f.limit,ga=[],U(a.start||c,b)}var aa,ba,ca,da,ea=n(),fa=c,ga=[],ha=[],ia=e.spectrum,ja=[],ka={};if(fa.noUiSlider)throw new Error(\"Slider was already initialized.\");return r(fa),q(e.connect,aa),da={destroy:X,steps:Y,on:Z,off:$,get:W,set:U,reset:V,__moveHandles:function(a,b,c){D(a,b,ga,c)},options:i,updateOptions:_,target:fa,pips:x},L(e.events),U(e.start),e.pips&&x(e.pips),e.tooltips&&t(),da}function S(a,b){if(!a.nodeName)throw new Error(\"noUiSlider.create requires a single element.\");var c=Q(b,a),d=R(a,c,b);return a.noUiSlider=d,d}y.prototype.getMargin=function(a){var b=this.xNumSteps[0];if(b&&a%b)throw new Error(\"noUiSlider: 'limit' and 'margin' must be divisible by step.\");return 2===this.xPct.length&&p(this.xVal,a)},y.prototype.toStepping=function(a){return a=t(this.xVal,this.xPct,a)},y.prototype.fromStepping=function(a){return u(this.xVal,this.xPct,a)},y.prototype.getStep=function(a){return a=v(this.xPct,this.xSteps,this.snap,a)},y.prototype.getNearbySteps=function(a){var b=s(a,this.xPct);return{stepBefore:{startValue:this.xVal[b-2],step:this.xNumSteps[b-2],highestStep:this.xHighestCompleteStep[b-2]},thisStep:{startValue:this.xVal[b-1],step:this.xNumSteps[b-1],highestStep:this.xHighestCompleteStep[b-1]},stepAfter:{startValue:this.xVal[b-0],step:this.xNumSteps[b-0],highestStep:this.xHighestCompleteStep[b-0]}}},y.prototype.countStepDecimals=function(){var a=this.xNumSteps.map(i);return Math.max.apply(null,a)},y.prototype.convert=function(a){return this.getStep(this.toStepping(a))};var T={to:function(a){return void 0!==a&&a.toFixed(2)},from:Number};return{create:S}});"],"sourceRoot":"/source/"}